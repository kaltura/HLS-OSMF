<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	frameRate="60"
	backgroundAlpha="0"
	backgroundColor="black"
	applicationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.kaltura.hls.SubtitleTrait;
			import com.kaltura.hls.SubtitleEvent;
			import com.kaltura.hls.manifest.HLSManifestParser;
			import com.kaltura.hls.HLSDVRTimeTrait;
			
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import flash.net.FileReference;
			import flash.external.ExternalInterface;

			import org.osmf.net.httpstreaming.HLSHTTPNetStream;

			import net.digitalprimates.osmf.utils.PluginLoader;
			import net.digitalprimates.osmf.utils.events.PluginLoaderEvent;
			
			import org.osmf.elements.ProxyElement;
			import org.osmf.containers.MediaContainer;
			import org.osmf.events.BufferEvent;
			import org.osmf.events.MediaElementEvent;
			import org.osmf.events.PlayEvent;
			import org.osmf.events.SeekEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.media.DefaultMediaFactory;
			import org.osmf.media.MediaElement;
			import org.osmf.media.MediaFactory;
			import org.osmf.media.MediaPlayer;
			import org.osmf.media.MediaResourceBase;
			import org.osmf.media.PluginInfoResource;
			import org.osmf.media.URLResource;
			import org.osmf.traits.DVRTrait;
			import org.osmf.traits.TimeTrait;
			import org.osmf.traits.MediaTraitType;
			import org.osmf.traits.PlayState;
			import org.osmf.utils.OSMFSettings;
			
			protected var autoPlay:Boolean = true;
			
			private var seeking:Boolean= false;
			private var scrubbing:Boolean = false;
			
			[Bindable]
			private var videoSources:IList;
			
			protected function get developmentStream():String {
				return null;
			}
			
			protected function get videoSourceURL():String {
				return null;
			}
			
			private function getVideoSources():void {
				var url:String = videoSourceURL;
				if (!url || url.length == 0)
					return;
				
				var loader:URLLoader = new URLLoader(new URLRequest(url));
				loader.addEventListener(Event.COMPLETE, onVideoSourcesComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, onVideoSourcesError);
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onVideoSourcesError);
			}
			
			private function onVideoSourcesComplete(event:Event):void {
				var loader:URLLoader = event.target as URLLoader;
				var data:XML = new XML(loader.data);
				
				loader.removeEventListener(Event.COMPLETE, onVideoSourcesComplete);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onVideoSourcesError);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onVideoSourcesError);
				
				var list:ArrayList = new ArrayList();
				
				for each (var x:XML in data..item) {
					var n:String = x.name;
					var u:String = x.url;
					var l:Boolean = (x.live == 'true');
					list.addItem(new VideoSource(n, u, l));
				}
				
				videoSources = list;
			}
			
			private function onVideoSourcesError(event:Event):void {
				var loader:URLLoader = event.target as URLLoader;
				loader.removeEventListener(Event.COMPLETE, onVideoSourcesComplete);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onVideoSourcesError);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onVideoSourcesError);
				
				Alert.show("Error loading video sources!");
			}
			
			[Bindable]
			protected var currentTime:Number = 0;
			
			[Bindable]
			protected var duration:Number = 0;
			
			protected function formatTime(seconds:Number):String {
				var minutes:int = Math.floor(seconds / 60);
				var leftOver:int = seconds - (minutes * 60);
				
				return String(minutes + ":" + formatNumber(leftOver, 2));
			}
			
			protected function formatNumber(value:Number, places:int):String {
				var str:String = String(value);
				
				while (str.length < places) {
					str = "0" + str;
				}
				
				return str;
			}
			
			// OSMF /////////////////////////////////////////////////////////////////////
			
			private var pluginsLoaded:Boolean = false;
			
			private var pluginLoader:PluginLoader;
			private var factory:MediaFactory;
			private var resource:MediaResourceBase;
			protected var element:MediaElement;
			protected var player:MediaPlayer;
			protected var container:MediaContainer;
			
			private var statisticsWindow:StatisticsWindow;
			//private var traceWindow:TraceWindow;
			
			protected function get plugins():Vector.<PluginInfoResource> {
				return null;
			}
			
			protected function init():void {
				getVideoSources();
				
				player = createPlayer();
				
				container = createContainer();
				wrapper.addChild(container);
				sizeContainer();
				
				factory = createFactory();
				
				pluginLoader = new PluginLoader(factory, plugins);
				pluginLoader.addEventListener(PluginLoaderEvent.LOAD_COMPLETE, onPluginsLoaded);
				pluginLoader.addEventListener(PluginLoaderEvent.LOAD_ERROR, onPluginsLoadError);
				
				// Nothing to load.
				if (!pluginLoader.load()) {
					pluginsLoaded = true;
				}
				
				statisticsWindow = PopUpManager.createPopUp(this, StatisticsWindow, false) as StatisticsWindow;
				statisticsWindow.player = player;
				statisticsWindow.y = 25;
				statisticsWindow.addEventListener(CloseEvent.CLOSE, onStatisticsClose);
				
				/* traceWindow = PopUpManager.createPopUp(this, TraceWindow, false) as TraceWindow;
				traceWindow.x = 400;
				traceWindow.y = 25;
				traceWindow.addEventListener(CloseEvent.CLOSE, onTraceClose); */
				
				// Adjust the segment buffer length by altering this static variable
				HLSManifestParser.MAX_SEG_BUFFER = 3;
				
				loadVariableURL();
			}
			
			private function loadVariableURL():void {
				var url:String = ExternalInterface.call("window.location.href.toString");
				var idx:int = url.indexOf('?');
				if (idx != -1) {
					var search:String = url.substring(idx+1);
					var vars:URLVariables = new URLVariables(search);
					if (vars.hasOwnProperty("url")) {
						var stream:String = unescape(vars["url"]);
						if (stream != null && stream.length > 0) {
							videoInput.text = stream;
							playStream();
						}
					}
				}
			}
			
			private function sizeContainer():void {
				if (container && wrapper) {
					container.width = wrapper.width;
					container.height = wrapper.height;
				}
			}
			
			protected function createPlayer():MediaPlayer {
				var p:MediaPlayer = new MediaPlayer();
				
				p.addEventListener(PlayEvent.PLAY_STATE_CHANGE, onPlayStateChange);
				p.addEventListener(BufferEvent.BUFFERING_CHANGE, onBufferingChange);
				p.addEventListener(SeekEvent.SEEKING_CHANGE, onSeekingChange);
				p.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onTimeChange);
				p.addEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
				
				return p;
			}
			
			protected function createContainer():MediaContainer {
				return new MediaContainer();
			}
			
			protected function createFactory():MediaFactory {
				return new DefaultMediaFactory();
			}
			
			protected function buildResource(url:String, live:Boolean):MediaResourceBase {
				return new URLResource(url);
			}
			
			protected function clear():void {
				
			}
			
			protected function startStream(url:String, live:Boolean, autoPlay:Boolean=true):void {
				loading.visible = false;
				clear();
				
				resource = buildResource(url, live);
				element = factory.createMediaElement(resource);
				
				element.addEventListener(MediaElementEvent.TRAIT_ADD, onTraitAdd);
				
				statisticsWindow.element = element;
				
				player.autoPlay = autoPlay;
				player.media = element;
				
				container.addMediaElement(element);
			}
			
			private function playStream():void {
				var url:String = videoInput.text;
				var name:String = "";
				var live:Boolean = liveInput.selected;
				
				if (url == null || url.length == 0) {
					return;
				}
				
				if (pluginsLoaded) {
					startStream(url, live, autoPlay);
				}
			}
			
			private function processDVR():void {
				trace("GOT DVR TRAIT");
				var trait:DVRTrait = element.getTrait(MediaTraitType.DVR) as DVRTrait;
			}
			
			// HANDLERS /////////////////////////////////////////////////////////////////
			
			private function onEmbeddedCaptions(info:Object):void
			{
				trace("\n========Subtitle========");
				trace(info.text);
				trace("========================\n");
			}
			
			private function onStatisticsClose(event:CloseEvent):void {
				statisticsWindow.player = null;
				statisticsWindow.element = null;
				PopUpManager.removePopUp(statisticsWindow);
				statisticsWindow = null;
			}
			
			/* private function onTraceClose(event:CloseEvent):void {
				PopUpManager.removePopUp(traceWindow);
				traceWindow = null;
			} */
			
			private function onPluginsLoaded(event:PluginLoaderEvent):void {
				pluginLoader.removeEventListener(PluginLoaderEvent.LOAD_COMPLETE, onPluginsLoaded);
				pluginLoader.removeEventListener(PluginLoaderEvent.LOAD_ERROR, onPluginsLoadError);
				pluginLoader = null;
				pluginsLoaded = true;
			}
			
			private function onPluginsLoadError(event:PluginLoaderEvent):void {
				pluginLoader.removeEventListener(PluginLoaderEvent.LOAD_COMPLETE, onPluginsLoaded);
				pluginLoader.removeEventListener(PluginLoaderEvent.LOAD_ERROR, onPluginsLoadError);
				pluginLoader = null;
				trace( "Error loading plugin." );
			}
			
			private function onTraitAdd(event:MediaElementEvent):void {
				if (event.type == MediaTraitType.DVR) {
					processDVR();
				}
				
				var subtitleTrait:SubtitleTrait = element.getTrait( SubtitleTrait.TYPE ) as SubtitleTrait;

				// Give the statistics window the subtitle Trait so it can turn them on and off
				statisticsWindow.subtitleTrait = subtitleTrait;
				
				if ( subtitleTrait && subtitleTrait.languages.length > 0 )
				{
					subtitleTrait.addEventListener(SubtitleEvent.CUE, onSubtitleCue);

					// Listen for the onTextData event
					var localElem:MediaElement = element;
					while (localElem is ProxyElement)
					{
						localElem = (localElem as ProxyElement).proxiedElement;
					} 
					if (localElem.hasOwnProperty("client") && localElem["client"]) {
						localElem["client"].addHandler( "onTextData", onEmbeddedCaptions );
					}
				}
				
			}

			private function onSubtitleCue(e:SubtitleEvent):void
			{
				trace("SUBTITLE: " + e.text);
				subtitleLabel.text = e.text;
			}
			
			private function onWrapperResize(event:ResizeEvent):void {
				sizeContainer();
			}
			
			private function onBufferingChange(event:BufferEvent):void {
				loading.visible = event.buffering;
			}
			
			private function onPlayStateChange(event:PlayEvent):void {
				if (event.playState == PlayState.PLAYING) {
					playPause.selected = true;
				}
				else {
					playPause.selected = false;	
				}
			}
			
			private function onSeekingChange(event:SeekEvent):void {
				seeking = event.seeking;
			}
			
			private function onTimeChange(event:TimeEvent):void {
				currentTime = event.time;

				var tt:TimeTrait = element.getTrait(MediaTraitType.TIME) as TimeTrait;
				if(!tt)
					return;

				// Great, time is knowable - so what is it?
				var curTime:Number = tt.currentTime;
				if(tt is HLSDVRTimeTrait)
					curTime = (tt as HLSDVRTimeTrait).absoluteTime;

				ExternalInterface.call("onCurrentTime(" + curTime + ", " + ((tt is HLSDVRTimeTrait) ? "true" : "false") + ")");

				if (!scrubbing && !seeking) {
					scrubber.value = currentTime;
				}
			}
			
			private function onDurationChange(event:TimeEvent):void {
				duration = event.time;
				
				scrubber.minimum = 0;
				scrubber.maximum = duration;
			}
			
			private function onPlayChange(event:Event):void {
				try 
				{
					if (player.paused) {
						player.play();
					}
					else 
					{
						player.pause();
					}					
				}
				catch(e:*)
				{
					trace("Could not pause.");
				}
			}
			
			private function onScrubberChangeStart(event:FlexEvent):void {
				scrubbing = true;
			}
			
			private function onScrubberChangeEnd(event:FlexEvent):void {
				if (player.canSeek) {
					player.seek(event.target.value);
				}
				
				scrubbing = false;
			}
			
			private function onVideoSourceChange(event:Event):void {
				videoInput.text = videoSelector.selectedItem.url;
				liveInput.selected = videoSelector.selectedItem.isLive;
			}

			private function getH264():void
			{
				//var fr:FileReference = new FileReference();
				//fr.save(M2TSParser._totalh264);
			}

			private function getFLV():void
			{
				var fr:FileReference = new FileReference();
				fr.save(HLSHTTPNetStream._masterBuffer);
			}
		]]>
	</fx:Script>
	
	<s:VGroup top="0" left="0" right="0" bottom="0" gap="0">
		
		<s:HGroup width="100%" height="30" paddingLeft="20" paddingRight="20" verticalAlign="middle">
			
			<s:Spacer width="100%"/>
			
			<mx:VRule height="100%"/>
			
			<s:CheckBox
				id="liveInput"
				label="Live"
				color="white"/>
			
			<s:TextInput
				id="videoInput"
				width="350"
				text="{developmentStream}"/>
			
			<s:DropDownList
				id="videoSelector"
				width="350"
				dataProvider="{videoSources}"
				labelField="name"
				change="onVideoSourceChange(event)"/>
			
			<s:Button
				label="Play"
				click="playStream()"/>
			
			<s:Button
				label="DL H264"
				click="getH264()"/>

			<s:Button
				label="DL FLV"
				click="getFLV()"/>

			<!--<s:Button
			label="Test"
			click="MP4Decoder.parsedOnce = true"/>-->
			
		</s:HGroup>
		
		<s:Group width="100%" height="100%">
			
			<mx:UIComponent
				id="wrapper"
				width="100%" height="100%"
				resize="onWrapperResize(event)"/>
			
			<mx:ProgressBar
				id="loading"
				width="175"
				indeterminate="true"
				verticalCenter="0"
				horizontalCenter="0"/>
			
		</s:Group>

		<s:HGroup width="100%" verticalAlign="middle" gap="0" height="32">
			<s:Label id="subtitleLabel" text="CAPTIONS" color="0xFFFFFF" width="100%" height="100%"/>
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="middle" gap="0">
			
			<s:ToggleButton
				id="playPause"
				skinClass="spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin"
				change="onPlayChange(event)"/>
			
			<s:ScrubBar
				id="scrubber"
				width="100%"
				changeStart="onScrubberChangeStart(event)"
				changeEnd="onScrubberChangeEnd(event)"/>
			
			<s:Label
				text="{formatTime(currentTime)} / {formatTime(duration)}"
				color="white"/>
			
			<s:Spacer width="5"/>
			
			<!--<s:MuteButton
			id="volume"
			skinClass="spark.skins.spark.mediaClasses.normal.MuteButtonSkin"/>-->
			
			<!--<s:ToggleButton
			id="fullscreen"
			skinClass="spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin"/>-->
			
		</s:HGroup>
		
	</s:VGroup>
	
</s:Application>
